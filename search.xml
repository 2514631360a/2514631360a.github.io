<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/08/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>solution</title>
    <url>/2025/08/01/solution/</url>
    <content><![CDATA[<p>先假设这个过程在树上进行。</p>
<p>考虑暴力，模拟这个过程，对一条边选择哪个点移动进行决策。发现一定是移动剩余距离最大的点，因为如果移动距离较小的点，调整一定不劣。</p>
<p>但是模拟这个过程无法优化，没有前途。调整思路，不关注时间，而关注每条边，答案显然等于所有边最后经过时间的最大值，如果能计算出每个点 $i$ 到 $x$ 的时间，那么 $(x,p_x)$ 最后经过时间可以通过上述贪心求出。因为每次移动剩余距离最大的点，我们只需要关心所有经过 $(x,p_x)$ 的路径的出发点 $a_i$。</p>
<p>考察特殊情况，如果只有 $1$ 条路径，那么显然到达 $x$ 的时间为 $d_{a_i}-d_{x}$，其中 $d_i$ 表示 $i$ 点的深度。</p>
<p>拓展到一般情况，发现会出现某个时刻，两个点在同一位置，造成堵塞的情况。这种情况不好考虑，不妨猜测不用考虑这种情况，直接另 $a_i$ 到 $x$ 的时间为 $d_{a_i}-d_{x}$ 而不影响答案。证明考虑如果 $u,v$ 两点 $t$ 时刻在 $z$ 点堵塞了，那么到达 $p_z$ 的时刻应为 $t+1,t+2$，但是观察到我们可以将堵塞时间延后，将 $(z,p_z)$ 边扩容，到达 $p_z$ 时刻变为 $t+1,t+1$，但是他们在 $p_z$ 仍会堵塞，那么得到一个结论：将 $(x,p_x)$ 子树内的边扩容为 $+\infty$，不影响 $(x,p_x)$ 答案的计算。</p>
<p>如果得到到达 $x$ 的时间集合 $T$，考虑如何计算 $(x,p_x)$ 的贡献。显然最后经过时刻具有单调性，考虑二分时间 $t$，判断能否再 $\le t$ 时间走完这条边。</p>
<p>考虑 hall 定理，相当于每个时刻 $t_i$ 可以连边 $(t_i,t]$，判断是否存在完美匹配。为了方便，平移一格匹配，也就是 $t_i$ 可以连边 $[t_i,t]$，将求出的时刻 $t$ 加一即可。只需要考虑所有后缀 $(i,t]$，是否都满足 $|N(S)|\ge |S|$，即 $t-i\ge s_{t}-s_{i}$，其中 $s_i$ 表示时刻小于等于 $i$ 的点的个数，条件等价于 $t-s_{t}\ge i-s_{i}$。</p>
<p>这个信息可以通过线段树合并维护区间 $\max{i-s_i}$，线段树上二分查询得到。</p>
<p>拓展到基环树上，考虑断环为链，就可以考虑到所有经过环上的路径了，注意到复制的环上的点会正确地考虑到所有信息。</p>
<p>注意到二分的位置需要包含所有子树中目前存在时刻，我先维护区间时刻出现次数和，求出但前最大时刻 $pos$，在 $[pos,+\infty]$ 上二分。</p>
<p>线段树合并需要进行区间修改，为了减少空间，我使用了标记永久化。</p>
<p>事实上观察到 $s_t$ 为定值，那么相当于 $i\ge j+s_{i}-s_{j}$，可以转化为单点修改，答案也是容易合并的。</p>
<p>代码写得很复杂，建议参考其他的题解。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> file_in(x) (freopen(#x<span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> file_out(x) (freopen(#x<span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vi vector</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pr pair <span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> START;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, M = <span class="number">100</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, p[N], a[N], b[N];</span><br><span class="line"><span class="type">int</span> stk[N], tot, vis[N];</span><br><span class="line"><span class="type">int</span> d[N], idx, dy[N];</span><br><span class="line"><span class="type">int</span> dfn[N], sz[N], tp[N], dep[N], mxd[N], cnt;</span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="type">int</span> fr[N], o;</span><br><span class="line"><span class="type">int</span> lim;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rt[N], mx[N * M], ex[N * M], tag[N * M], ls[N * M], rs[N * M], num;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line">vi &lt;<span class="type">int</span>&gt; G[N], q, id[N];</span><br><span class="line">vi &lt;pr&gt; vc[N];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> END;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_e</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;G[x].<span class="built_in">pb</span>(y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (v[x]) &#123;</span><br><span class="line">    <span class="type">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (stk[i] == x) fl = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (fl) d[++idx] = stk[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  stk[++tot] = x, v[x] = <span class="number">1</span>, <span class="built_in">dfs</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> TP)</span> </span>&#123;</span><br><span class="line">  dfn[x] = ++cnt, sz[x] = <span class="number">1</span>, tp[x] = TP, fr[x] = o, q.<span class="built_in">pb</span>(x);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x]) <span class="keyword">if</span> (!vis[y]) dep[y] = dep[x] + <span class="number">1</span>, <span class="built_in">dfs2</span>(y, TP), sz[x] += sz[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">psu</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  mx[x] = <span class="built_in">max</span>(ls[x] ? mx[ls[x]] : mid, rs[x] ? mx[rs[x]] : r) + tag[x];</span><br><span class="line">  ex[x] = ex[ls[x]] + ex[rs[x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;tag[p] -= k, mx[p] -= k;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nnd</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num++, mx[num] = r, ls[num] = rs[num] = ex[num] = tag[num] = <span class="number">0</span>, num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mrg</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x | y;</span><br><span class="line">  tag[x] += tag[y];</span><br><span class="line">  <span class="keyword">if</span> (l == r)</span><br><span class="line">    <span class="keyword">return</span> mx[x] = r + tag[x], ex[x] += ex[y], x;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  ls[x] = <span class="built_in">mrg</span>(l, mid, ls[x], ls[y]);</span><br><span class="line">  rs[x] = <span class="built_in">mrg</span>(mid + <span class="number">1</span>, r, rs[x], rs[y]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">psu</span>(l, r, x), x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> k, <span class="type">int</span> &amp; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!p) p = <span class="built_in">nnd</span>(l, r);</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) <span class="keyword">return</span> <span class="built_in">work</span>(k, p);</span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= mid) <span class="built_in">add</span>(l, mid, L, R, k, ls[p]);</span><br><span class="line">  <span class="keyword">if</span> (R &gt; mid) <span class="built_in">add</span>(mid + <span class="number">1</span>, r, L, R, k, rs[p]);</span><br><span class="line">  <span class="built_in">psu</span>(l, r, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addex</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ps, <span class="type">int</span> k, <span class="type">int</span> &amp; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!p) p = <span class="built_in">nnd</span>(l, r);</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> ex[p] += k, <span class="built_in">void</span>();</span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  ps &lt;= mid ? <span class="built_in">addex</span>(l, mid, ps, k, ls[p]) : <span class="built_in">addex</span>(mid + <span class="number">1</span>, r, ps, k, rs[p]);</span><br><span class="line">  <span class="built_in">psu</span>(l, r, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getp</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!ex[p]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (ex[rs[p]] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">getp</span>(mid + <span class="number">1</span>, r, rs[p]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">getp</span>(l, mid, ls[p]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> &amp; premx, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (!ls[p]) ls[p] = <span class="built_in">nnd</span>(l, mid);</span><br><span class="line">  <span class="keyword">if</span> (!rs[p]) rs[p] = <span class="built_in">nnd</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mx[p] + k &gt;= premx) <span class="keyword">return</span> l;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    k += tag[p];</span><br><span class="line">    <span class="keyword">if</span> (mx[ls[p]] + k &gt;= premx)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">ask</span>(l, mid, L, R, premx, k, ls[p]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mx[rs[p]] + k &gt;= (premx = <span class="built_in">max</span>(premx, mx[ls[p]] + k)))</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">ask</span>(mid + <span class="number">1</span>, r, L, R, premx, k, rs[p]);</span><br><span class="line">    <span class="keyword">else</span> premx = <span class="built_in">max</span>(premx, mx[rs[p]] + k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  k += tag[p];</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= mid) &#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">ask</span>(l, mid, L, R, premx, k, ls[p]);</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="number">-1</span>) <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  premx = <span class="built_in">max</span>(premx, mx[ls[p]] + k);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">ask</span>(mid + <span class="number">1</span>, r, L, R, premx, k, rs[p]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs3</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  mxd[x] = dep[x];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == d[<span class="number">1</span>] + n &amp;&amp; y == d[idx] + n) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == d[<span class="number">1</span>] &amp;&amp; y == d[idx]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs3</span>(y);</span><br><span class="line">    rt[x] = <span class="built_in">mrg</span>(<span class="number">0</span>, lim, rt[x], rt[y]), mxd[x] = <span class="built_in">max</span>(mxd[x], mxd[y]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> [t, v] : vc[x]) &#123;</span><br><span class="line">    <span class="built_in">add</span>(<span class="number">0</span>, lim, t, lim, v, rt[x]);</span><br><span class="line">    <span class="built_in">addex</span>(<span class="number">0</span>, lim, t, v, rt[x]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> tmp = -inf, pos = <span class="built_in">getp</span>(<span class="number">0</span>, lim, rt[x]);</span><br><span class="line">  <span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> tim = <span class="built_in">ask</span>(<span class="number">0</span>, lim, pos, lim, tmp, <span class="number">0</span>, rt[x]);</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, tim - dep[x] + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  cin &gt;&gt; n; <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; p[i];</span><br><span class="line">  cin &gt;&gt; m; <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) cin &gt;&gt; a[i] &gt;&gt; b[i], id[a[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) <span class="built_in">add_e</span>(p[i], i), <span class="built_in">add_e</span>(p[i] + n, i + n);</span><br><span class="line">  lim = <span class="built_in">max</span>(n, m) * <span class="number">2</span> + <span class="number">5</span>;</span><br><span class="line">  <span class="type">int</span> fl = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">1</span>; s &lt;= n; ++s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v[s]) <span class="keyword">continue</span>;</span><br><span class="line">    idx = tot = cnt = num = <span class="number">0</span>, ++o, q.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx; ++i) &#123;</span><br><span class="line">      d[i + idx] = d[i] + n;</span><br><span class="line">      dy[d[i]] = i, vis[d[i]] = <span class="number">1</span>;</span><br><span class="line">      dy[d[i] + n] = i + idx, vis[d[i] + n] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_e</span>(d[idx + <span class="number">1</span>], d[idx]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * idx; ++i)</span><br><span class="line">      dep[d[i]] = <span class="number">2</span> * idx - i, <span class="built_in">dfs2</span>(d[i], d[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> w : q) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> i : id[w]) &#123;</span><br><span class="line">	<span class="keyword">if</span> (fr[b[i]] != o) &#123;fl = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">	vc[a[i]].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i]], <span class="number">1</span>)), vc[a[i] + n].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i] + n], <span class="number">1</span>));</span><br><span class="line">	<span class="keyword">if</span> (vis[b[i]]) &#123;</span><br><span class="line">	  <span class="type">int</span> l = dy[tp[a[i]]], r = dy[b[i]];</span><br><span class="line">	  <span class="keyword">if</span> (l &lt;= r)</span><br><span class="line">	    vc[b[i]].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i]], <span class="number">-1</span>)), vc[b[i] + n].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i] + n], <span class="number">-1</span>));</span><br><span class="line">	  <span class="keyword">else</span> vc[b[i] + n].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i]], <span class="number">-1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">	  vc[b[i]].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i]], <span class="number">-1</span>)), vc[b[i] + n].<span class="built_in">pb</span>(<span class="built_in">mk</span>(dep[a[i] + n], <span class="number">-1</span>));</span><br><span class="line">	  <span class="keyword">if</span> (!(tp[a[i]] == tp[b[i]] &amp;&amp; dfn[a[i]] &gt;= dfn[b[i]] &amp;&amp; dfn[a[i]] &lt; dfn[b[i]] + sz[b[i]])) &#123;</span><br><span class="line">	    fl = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fl) <span class="keyword">return</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl, <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs3</span>(d[<span class="number">2</span> * idx]);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
